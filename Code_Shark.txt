package org.kosa.project.config.annotation;




@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@Qualifier("meetingFileUploadService")
public @interface MeetingFileServiceQualifier {
}
package org.kosa.project.config.annotation;




@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@Qualifier("userFileUploadService")
public @interface UserFileServiceQualifier {
}
package org.kosa.project.config;



@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final RequiredAuthorizationUrlMatcher matcher = new RequiredAuthorizationUrlMatcher(permitAllUrlPatterns());

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        http
                .authorizeHttpRequests(request -> request
                        .requestMatchers("/meeting/insertMeeting").authenticated()
                        .requestMatchers(permitAllUrlPatterns()).permitAll()
                        .anyRequest().authenticated())
                .formLogin(login -> login
                        .loginPage("/login")
                        .usernameParameter("email")
                        .passwordParameter("password")
                        .permitAll()
                )
                .requestCache(cache -> cache.requestCache(new HttpSessionRequestCache()))
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(session -> session
                        .maximumSessions(1)
                        .maxSessionsPreventsLogin(true))
                .cors(cors -> cors.configurationSource(configurationSource()))
                .logout(logout -> logout
                        .logoutRequestMatcher(new AntPathRequestMatcher("/logout", "POST"))
                        .logoutSuccessHandler((request, response, authentication) -> {
                            String redirectUrl = getRedirectUrl(request);
                            System.out.println(redirectUrl);
                            if (matcher.matches(request)) {
                                response.sendRedirect(redirectUrl);
                            } else {
                                response.sendRedirect("/");
                            }
                        })
                        .deleteCookies("JSESSIONID")
                        .permitAll());
        return http.build();
    }

    private String getRedirectUrl(HttpServletRequest request) {
        String host = request.getHeader("Host");
        String referer = request.getHeader("Referer");
        return referer.substring(referer.lastIndexOf(host) + host.length());
    }

    private String[] permitAllUrlPatterns() {
        return new String[]{"/*", "/static/**" ,"/css/**", "/api/**", "/meeting/*", "/js/**", "/posts/**", "/imgs/**", "/users/join", "/users/**", "/home"};
    }

    public CorsConfigurationSource configurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.addAllowedOrigin("*");
        configuration.addAllowedHeader("*");
        configuration.addAllowedMethod("*");
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();
        urlBasedCorsConfigurationSource.registerCorsConfiguration("/**", configuration);
        return urlBasedCorsConfigurationSource;

    }

    @Bean
    public BCryptPasswordEncoder bCryptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }

}
package org.kosa.project.config;


@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Value("${image.upload-dir}")
    private String actualFileSaveDirUrl;

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {

        registry.addResourceHandler("/imgs/**")
                        .addResourceLocations("file:" + actualFileSaveDirUrl + "/");

        registry.addResourceHandler("/imgs/users/**")
                        .addResourceLocations("file:" + actualFileSaveDirUrl + "/users/");

        registry.addResourceHandler("/imgs/meeting/**")
                .addResourceLocations("file:" + actualFileSaveDirUrl + "/meeting/");
    }
}
package org.kosa.project.controller;



@RestController
@RequiredArgsConstructor
@RequestMapping("/posts")
public class CommentRestController {
    private final CommentService commentService;

    @PostMapping("/{meetingId}/comments")
    public CommentResponseDto submitComment(@RequestBody final CommentRequestDto params, @AuthenticationPrincipal CustomUserDetails userDetails) {
        Long userId = Long.valueOf(userDetails.getUserId());
        params.setUserId(userId);
        long reMeetingId = commentService.submitComment(params);
        return commentService.findCommentById(reMeetingId);
    }

    @GetMapping("/{meetingId}/comments")
    public Map<String, Object> findAllComments(@RequestParam("meetingId") Long meetingId, @RequestParam(value = "page",defaultValue = "1") int page) {
        List<CommentResponseDto> comments = commentService.findAllComments(meetingId, page);
        int totalPages = (int) Math.ceil((double) commentService.countAllComments(meetingId)/10);

        Map<String, Object> response = new HashMap<>();
        response.put("comments", comments);
        response.put("page", page);
        response.put("totalPage", totalPages);

        return response;
    }

    @DeleteMapping("/{meetingId}/comments/{reMeetingId}")
    public Long deleteCommentById(@PathVariable final Long reMeetingId) {
        return commentService.deleteCommentById(reMeetingId);
    }

    @GetMapping("/{meetingId}/comments/{meetingCommentId}")
    public CommentResponseDto findCommentById(@PathVariable final Long meetingId, @PathVariable final Long meetingCommentId) {
        return commentService.findCommentById(meetingCommentId);
    }


    @PatchMapping("/{meetingId}/comments/{meetingCommentId}")
    public CommentResponseDto updateComment(@PathVariable final Long meetingId, @PathVariable final Long meetingCommentId, @RequestBody final CommentRequestDto params) {
        commentService.updateComment(params);
        return commentService.findCommentById(meetingCommentId);
    }

}
package org.kosa.project.controller;


@UtilityClass
public class DTOMapper{
    static MeetingRegisterDto convertToMeetingRegisterDto(MeetingRegisterRequest request, String convertedUrl, Long userId) {
        //userId로 받아온 건 request가 아니라 파라미터로 받기
        return new MeetingRegisterDto(0, userId, request.category(), request.subject(), request.context(), request.totalMember(), convertedUrl, MeetingStatus.CONTINUE, request.deadLineTime(), request.latitude(), request.longitude());
    }
}package org.kosa.project.controller;



@ControllerAdvice
public class ErrorControllerAdvice {

    @ExceptionHandler(value = {MeetingUserNotSufficientException.class})
    public String redirectMeeting(HttpServletRequest request, RedirectAttributes redirectAttributes) {
        String requestURI = request.getRequestURI();
        request.getParameterNames()
                .asIterator()
                .forEachRemaining(name -> {
                    redirectAttributes.addAttribute(name, request.getParameter(name));
                });
        return "redirect:" + requestURI;
    }


    @ExceptionHandler(value = {MeetingUserNotLoginException.class})
    @ResponseStatus(HttpStatus.SEE_OTHER)
    public String handleException(Exception ex, HttpServletRequest request, RedirectAttributes redirectAttributes) {
        String requestURI = request.getRequestURI();
        redirectAttributes.addAttribute("redirect", requestURI);
        return "redirect:/login";
    }


}
package org.kosa.project.controller;



@Controller
@RequiredArgsConstructor
public class HomeController {
    // /members/1 => Path variable
    // /members?id=1 => Query String
    // 홈을 호출했을 때 meeting/list 1 page
    @GetMapping("/")
    public String home(RedirectAttributes redirectAttributes) {
        redirectAttributes.addAttribute("page", 1);
        return "redirect:/meeting/list";
    }

}
package org.kosa.project.controller;


@Controller
@RequiredArgsConstructor
public class LoginController {
    private final UserService userService;

    @GetMapping("/login")
    public String login(Model model) {
        model.addAttribute("loginform", new LoginForm());
        return "loginForm";
    }
}
package org.kosa.project.controller.map;



@Controller
public class MapController {
    private final String apiKey;

    public MapController(@Value("${kakao.map.api.key}") String apiKey) {
        this.apiKey = apiKey;
    }
    @GetMapping("/map")
    public String showMap(Model model) {
        model.addAttribute("apiKey", apiKey);
        return "map";
    }

    @PostMapping("/getUserLocation")
    @ResponseBody
    public Map<String, Object> getUserLocation(@RequestBody Map<String, Double> location) {
        double latitude = location.get("latitude");
        double longitude = location.get("longitude");

        Map<String, Object> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", "위치 정보가 성공적으로 수신되었습니다.");
        response.put("latitude", latitude);
        response.put("longitude", longitude);

        return response;
    }
}
package org.kosa.project.controller;




@Log4j2
@Controller
@RequestMapping("/meeting")
public class MeetingController {

    private final MeetingService meetingService;
    private final FileUploadService fileUploadService;

    private static final Integer PAGE_PER_SIZE = 6;
    public MeetingController(MeetingService meetingService, @MeetingFileServiceQualifier FileUploadService fileUploadService) {
        this.meetingService = meetingService;
        this.fileUploadService = fileUploadService;
    }

    @GetMapping("/list")
    public String list(@ModelAttribute SearchConditionDto condition,
                       @RequestParam(defaultValue = "1") Integer page,
                       Model model) {
        return getMeetingList(condition, page, model);
    }

    private String getMeetingList(SearchConditionDto condition, Integer page, Model model) {
        System.out.println(condition);

        Page<MeetingSummaryDto> detailList = meetingService.meetingList(condition, page, PAGE_PER_SIZE);
        model.addAttribute("detailList", detailList);
        model.addAttribute("condition", condition);
        model.addAttribute("categories", Category.values());
        model.addAttribute("statuses", MeetingStatus.values());
        System.out.println("getMeetingList -> " + condition+" Category -> "+condition.getCategory());
        return "meeting/list";
    }


    // /meeting/comment
    // /meeting/{meetingId}/comments post
    // -> /meeting/{meetingId}/detail
    // -> /meeting/detailsMeeting?meetingId=?/comment
    @GetMapping("/detailMeeting")
    public String detailMeeting(@RequestParam Long meetingId, Model model, @AuthenticationPrincipal CustomUserDetails userDetails) {
        //나중에 예외처리 할 것이 뭐냐면? param값이 없는 값이 없다고 표시
        //        model.addAttribute("userTypes", userTypes);*/
        MeetingDetailDto meetingDetailDto = meetingService.meetingDetails(meetingId);
        // 현재 로그인 한 유저의 현재 미팅에 대한 참여 정보를 확인하고 싶다.

        if (userDetails != null) {
            model.addAttribute("userIdentify", userDetails.getUserId());
        }

        System.out.println(meetingDetailDto.toString());
        UserMeetingStrategy userMeetingStrategy = getCurrentLoginUserMeetingType(userDetails, meetingDetailDto.getUserMeetingDto());
        model.addAttribute("meetingDetailDto", meetingDetailDto);
        model.addAttribute("userType", userMeetingStrategy);

        return "meeting/detailMeeting";
    }

    private UserMeetingStrategy getCurrentLoginUserMeetingType(CustomUserDetails userDetails, List<UserMeetingDto> userMeetings) {
        if (userDetails == null) {
            return UserMeetingStrategy.NOT_LOGIN;
        }
        for (UserMeetingDto userMeeting : userMeetings) {
            long loginUserId = userDetails.getUserId();
            if (userMeeting.getUserId() == loginUserId) {
                return userMeeting.getUserType();
            }
        }
        return UserMeetingStrategy.NOT_FOLLOWER;
    }


    @GetMapping("/insertMeeting")
    public String insertMeeting(Model model) {
        model.addAttribute("meetingRegisterRequest", new MeetingRegisterRequest(1L, Category.BOB_FRIEND, null, null, 0, null, null, null, null));
        model.addAttribute("categories", Category.values()); //Enum 카테고리 데이터 넘기기
        return "meeting/insertMeeting";
    }

    @PostMapping("/insertMeeting")
    public String insertMeetingData(@ModelAttribute @Validated MeetingRegisterRequest request, BindingResult bindingResult,
                                    Model model,
                                    @AuthenticationPrincipal CustomUserDetails user) {
        if (bindingResult.hasErrors()) {
            model.addAttribute("categories", Category.values());
            model.addAttribute("meetingRegisterRequest", request);
            return "meeting/insertMeeting";
        }
        long userId = user.getUserId();
        String response = request.validate();
        String fileUploadUrl = fileUploadService.saveFile(request.image());
        meetingService.save(convertToMeetingRegisterDto(request, fileUploadUrl, userId));
        return response;
    }
}

package org.kosa.project.controller;



@Slf4j
public record MeetingRegisterRequest(Long userId, Category category, String subject,
                                     String context, Integer totalMember, MultipartFile image, LocalDateTime deadLineTime,
                                     @NotNull Double latitude, @NotNull Double longitude) {
    String validate() {
        if (category == null) {
            log.error("Category is null");
            return "redirect:/meeting/insertMeeting";
        }

        if (image.getContentType() == null || !image.getContentType().startsWith("image/")) {
            log.error("이미지 파일이 아님 {}", image.getContentType());
            return "redirect:/meeting/insertMeeting";
        }

        return "redirect:/meeting/list";
    }
}
package org.kosa.project.controller;


@RestController
@RequestMapping("/api/meeting")
@RequiredArgsConstructor
@Slf4j
public class MeetingRestController {

    private final MeetingService meetingService;
    private final ChattingService chattingService;

    @PostMapping("/detailMeeting")
    public ResponseEntity<?> userTypeMappingAction(
            @RequestBody UserMeetingCheckDto userMeetingCheckDto, //body -> model
            @AuthenticationPrincipal CustomUserDetails userDetails) {

        // 비로그인이면
        if (userDetails == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not Logged In");
        }

        // setter
        userMeetingCheckDto.setUserId(userDetails.getUserId());
        UserMeetingStrategy userType = userMeetingCheckDto.getUserType();
        userType.handleAction(meetingService, userMeetingCheckDto);

        return ResponseEntity.ok().build();
    }

    /**
     * netty 접속을 위한 roomId, userId를 리턴
     */
    @GetMapping("/{meetingId}/rooms")
    public ResponseEntity<RoomPermissionDto> issueRoomPermission(@PathVariable Long meetingId,
                                                                 @AuthenticationPrincipal CustomUserDetails userDetails) {
        if (userDetails == null) {
            log.error("Access denied For Not Authenticated User");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }

        Long userId = userDetails.getUserId();
        return ResponseEntity.ok().body(meetingService.issueRoomPermission(meetingId, userId));
    }

    @PostMapping("/room/{roomId}")
    public String saveChatMessage(@RequestBody SaveChatMessageDto chatMessage, @PathVariable Long roomId,
                                  @AuthenticationPrincipal CustomUserDetails userDetails) {
        System.out.println("MeetingRestController.saveChatMessage");
        if (chatMessage.getRoomId() != roomId) {
            // 잘못된 요청
            System.out.println(roomId);
            return null;
        }
        System.out.println(chatMessage);
        chattingService.saveChat(chatMessage);
        System.out.println(roomId);
        return "ok";
    }

    /*관리자가 대기중인 회원 관리할 때.*/
    @PostMapping("/confirmCheck")
    public ResponseEntity<?> userConfirmCheckAction(
            @RequestBody UserMeetingCheckDto userMeetingCheckDto, //body -> model
            @AuthenticationPrincipal CustomUserDetails userDetails) {

        // setter;
        UserMeetingStrategy userType = userMeetingCheckDto.getUserType();
        userType.handleAction(meetingService, userMeetingCheckDto);

        return ResponseEntity.ok().build();
    }

}
package org.kosa.project.controller;



@Setter
@Getter
@NoArgsConstructor
public class Page<T> {

    private List<T> elements;
    // 현재 페이지 번호
    private int currentPage;
    // 페이지당 컨텐츠 개수
    private int pagePerSize;

    private int totalDataSize;

    public List<T> getKeyword() { return elements;
    } //현재 페이지의 데이터 목록을 반환합니다.

    public int getTotalElements() {
        return elements.size();
    } //전체 데이터 수를 반환합니다.

    public int getTotalPages() {
        return (int)Math.ceil((double)totalDataSize / pagePerSize);
    } //전체 페이지 수를 반환합니다.

    public int getNumber() {
        return currentPage;
    } //현재 페이지 번호를 반환합니다 (0부터 시작).

    public int getSize() {
        return pagePerSize;
    } //페이지 당 데이터 개수를 반환합니다.

    public boolean hasNext() {
        return getTotalPages() > currentPage;
    } //다음 페이지가 있는지 여부를 반환합니다.

    public boolean hasPrevious() {
        return currentPage > 0;
    } //이전 페이지가 있는지 여부를 반환합니다.

    public boolean isFirst() {
        return currentPage == 1;
    } //첫 번째 페이지인지 여부를 반환합니다.

    public boolean isLast() {
        return currentPage == getTotalPages();
    } //마지막 페이지인지 여부를 반환합니다.
}
package org.kosa.project.controller;


@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Pageable {
    private int currentPage;
    private int pagePerSize;
}
package org.kosa.project.controller;


@Controller
@RequiredArgsConstructor
public class ProfileController {
    @GetMapping("/profile")
    public String profile() {
        return "profile";
    }
}
package org.kosa.project.controller;


@Controller
@RequestMapping("/users")
public class UserController {

    private final UserService userService;
    private final FileUploadService fileUploadService;
    private final UserMeetingListService userMeetingListService;

    public UserController(UserService userService, @UserFileServiceQualifier FileUploadService fileUploadService, UserMeetingListService userMeetingListService) {
        this.userService = userService;
        this.fileUploadService = fileUploadService;
        this.userMeetingListService = userMeetingListService;
    }

    @GetMapping("/join")
    public String joinForm(Model model) {
        model.addAttribute("userRegisterForm", new UserRegisterForm());
        return "joinForm";
    }

    @PostMapping("/join")
    public String join(@ModelAttribute @Validated UserRegisterForm userRegisterForm, BindingResult bindingResult, Model model) {
        System.out.println(userRegisterForm);
        if (bindingResult.hasErrors()) {
            System.out.println(bindingResult);
            model.addAttribute("userRegisterForm", userRegisterForm);
            return "joinForm";
        }

        //1. 파일을 저장
        MultipartFile imgFile = userRegisterForm.getProfileImg();
        String profileImageUrl = fileUploadService.saveFile(imgFile);

        // 2. 유저 정보를 저장.
        userRegisterForm.setProfileImgUrl(profileImageUrl);
        userService.save(userRegisterForm);

        // 3. 리다이렉트 한다.
        return "redirect:/";
    }

    @GetMapping("/{userId}")
    public String userProfile1(@PathVariable Long userId,  String userType, Model model,
                               @RequestParam(defaultValue = "1") Integer page) {
        UserProfileDto userProfileDto = userService.getProfile(userId);
        Page <UserMeetingListDto> userMeetingJoinList = userMeetingListService.userMeetingJoinList(userId, userType, page, 5);
        model.addAttribute("userProfileDto", userProfileDto);
        model.addAttribute("joinList", userMeetingJoinList);
        model.addAttribute("userType", userType);
        return "profile";
    }


    @GetMapping("/profile/{email}")
    public String userProfile2(@PathVariable("email") String email, Model model) {
//        UserProfileDto userProfileDto = userService.getProfile(email);
//        model.addAttribute("userProfileDto",userProfileDto);
        return "userProfileDto";
    }



}

package org.kosa.project.controller;


@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserRestController {

    private final UserService userService;

    @PostMapping("/userEmailCheck")
    public ResponseEntity <Boolean> checkUserName(@RequestParam String email){
        String userEmail = userService.findUserByEmailCheck(email);

        boolean isEmailCheck = (userEmail==null);
        System.out.println(isEmailCheck +"  isEmailCheck");
        return ResponseEntity.ok(userEmail == null);
    }
}
package org.kosa.project;


@SpringBootApplication
@MapperScan
@EnableScheduling
public class KosaProject2ndApplication {

    public static void main(String[] args) {
        SpringApplication.run(KosaProject2ndApplication.class, args);
    }

}
package org.kosa.project.repository.mapper;



@Mapper
public interface CommentMapper {
    void submit(CommentRequestDto params);

    CommentResponseDto findById(Long reMeetingId);

    List<CommentResponseDto> findAll(@Param("meetingId") Long meetingId, @Param("page") int page);


    void update(CommentRequestDto params);

    void deleteById(Long meetingCommentId);

    int count(Long meetingId);
}
package org.kosa.project.repository.mapper;



@Mapper
public interface MeetingMapper {
    void save(MeetingRegisterDto meetingDto);


    Page<MeetingSummaryDto> meetingList(@Param("condition") SearchConditionDto searchConditionDto, @Param("pageable") Pageable pageable);

    long selectLastInsertId(long userId);

    void userMeetingSave(UserMeetingCheckDto userMeetingDto);

    MeetingDetailDto meetingDetails(long meetingId);

    int countMeetings(); //전체게시글
    void userMeetingUpdate(UserMeetingCheckDto userMeetingCheckDto);

    /*user_meeting 관련*/
    String getUserMeetingCheck(long meetingId, long userId);

    /*모임참석 눌렀을시 현재원 수 업데이트*/
    void meetingUpdatePresentStatus(long meetingId);
    /*모임나가기*/
    void exitMeeting(UserMeetingCheckDto userMeetingDto);

    UserMeetingDto findUserMeetingByUserIdAndMeetingId(@Param("meetingId") Long meetingId, @Param("userId") Long userId);

    RoomPermissionDto findRoomWithAllChatListByMeetingAndUser(@Param("meetingId") Long meetingId, @Param("userId") Long userId);

    Long saveChat(SaveChatMessageDto chatMessage);

    void createMeetingRoom(long meetingId);

    void updateMeetingEndTime();
}
package org.kosa.project.repository.mapper;



@Mapper
public interface UserMapper {
    void insertUser(UserRegisterForm userDto);
    UserProfileDto findUserProfileById(Long userId);
    UserDto findUserByEmail(String email);

    String findUserByEmailCheck(String email);

    //내가 만든 모임 리스트
    Page<UserMeetingListDto> userMeetingJoinList (long userId, @Param("userType") String userType, @Param("pageable") Pageable pageable);
}

package org.kosa.project.repository;


@Repository
@RequiredArgsConstructor
public class MeetingRepository {
    private final MeetingMapper meetingMapper;

    public void save(MeetingRegisterDto meetingDto) {
        meetingMapper.save(meetingDto);
    }

    public long selectLastInsertId(long userId) {
        return meetingMapper.selectLastInsertId(userId);
    }

    public Page<MeetingSummaryDto> meetingList(SearchConditionDto searchConditionDto, Pageable pageable) {
        return meetingMapper.meetingList(searchConditionDto, pageable);
    }
    /*모임참여관련 */

    public void userMeetingSave(UserMeetingCheckDto userMeetingDto) {
        meetingMapper.userMeetingSave(userMeetingDto);
    }

    public String getUserMeetingCheck(long userId, long meetingId) {

        return meetingMapper.getUserMeetingCheck(userId, meetingId);
    }

    /**상세 게시물 DTO + USER_MEETING DTO 통합*/
    public MeetingDetailDto meetingDetails(long meetingId) {
        return meetingMapper.meetingDetails(meetingId);
    }

    /*모임참석 눌렀을시 현재원 수 업데이트*/


    public void meetingUpdatePresentStatus(long meetingId){
        meetingMapper.meetingUpdatePresentStatus(meetingId);
    }

    /*관리자가 Wait를 허용했을 떄*/
    public void userMeetingUpdate(UserMeetingCheckDto userMeetingCheckDto){
        meetingMapper.userMeetingUpdate(userMeetingCheckDto);
    }

    /*모임나가기*/
    public void exitMeeting(UserMeetingCheckDto userMeetingDto) {
        meetingMapper.exitMeeting(userMeetingDto);
    }

    public UserMeetingDto findUserMeetingByUserIdAndMeetingId(Long meetingId, Long userId) {
        return meetingMapper.findUserMeetingByUserIdAndMeetingId(meetingId, userId);
    }

    public RoomPermissionDto findRoomWithAllChatListByMeetingAndUser(Long meetingId, Long userId) {
        return meetingMapper.findRoomWithAllChatListByMeetingAndUser(meetingId, userId);
    }

    public void createMeetingRoom(long meetingId) {
        meetingMapper.createMeetingRoom(meetingId);
    }

    public void updateMeetingEndTime() {
        meetingMapper.updateMeetingEndTime();
    }
}
package org.kosa.project.repository;


@Repository
@RequiredArgsConstructor
public class UserRepository {
    private final UserMapper userMapper;

    public Page<UserMeetingListDto> userMeetingJoinList (long userId, String userType, Pageable pageable){
        return userMapper.userMeetingJoinList(userId,userType, pageable);
    }
}
package org.kosa.project.security;


public class CustomAutheticationProvider {
    public static void main(String[] args) {

    }
}
package org.kosa.project.security;



@Getter
@ToString
public class CustomUserDetails implements UserDetails {
    //TODO: long으로 바꾸기
    private static final String USER_AUTHORITY = "ROLE_USER";
    private final String userName;
    private final long userId;
    private final String email;
    private final String password;

    public CustomUserDetails(String userName, long userId, String email, String password) {
        this.userName = userName;
        this.userId = userId;
        this.email = email;
        this.password = password;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(USER_AUTHORITY));
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return userName;
    }
}
package org.kosa.project.security;


@Component
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private final UserMapper userMapper;
    private final BCryptPasswordEncoder bCryptPasswordEncoder;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        UserDto userDetailDto = userMapper.findUserByEmail(email);
        if (userDetailDto == null) {
            throw new UsernameNotFoundException("사용자를 찾을 수 없습니다.");
        }
        return new CustomUserDetails(userDetailDto.getName(), userDetailDto.getUserId(), userDetailDto.getEmail(), bCryptPasswordEncoder.encode(userDetailDto.getPassword()));
    }
}





package org.kosa.project.security;



public class RequiredAuthorizationUrlMatcher {
    private List<AntPathRequestMatcher> requestMatchers = new ArrayList<>();

    public RequiredAuthorizationUrlMatcher(String... urlPatterns) {
        for (String pattern: urlPatterns) {
            requestMatchers.add(new AntPathRequestMatcher(pattern));
        }
    }

    public boolean matches(HttpServletRequest request) {
        for (AntPathRequestMatcher requestMatcher : requestMatchers) {
            if (requestMatcher.matches(request)) {
                return true;
            }
        }
        return false;
    }
}
package org.kosa.project.service;


@Service
@RequiredArgsConstructor
public class ChattingService {
    private final MeetingMapper meetingMapper;

    public Long saveChat(SaveChatMessageDto chatMessage) {
        return meetingMapper.saveChat(chatMessage);
    }
}
package org.kosa.project.service;



@Service
@RequiredArgsConstructor
public class CommentService {
    private final CommentMapper commentMapper;

    @Transactional
    public Long submitComment(final CommentRequestDto params) {
        System.out.println("Service"+params);
        commentMapper.submit(params);
        return params.getMeetingCommentId();
    }

    public CommentResponseDto findCommentById(final Long reMeetingId) {
        return commentMapper.findById(reMeetingId);
    }

    @Transactional
    public Long updateComment(final CommentRequestDto params) {
        commentMapper.update(params);
        return params.getMeetingCommentId();
    }

    public List<CommentResponseDto> findAllComments(final long meetingId, final int page) {
        return commentMapper.findAll(meetingId, page);
    }

    public  int countAllComments(final long meetingId) {
        return commentMapper.count(meetingId);
    }

    @Transactional
    public long deleteCommentById(final Long reMeetingId) {
        commentMapper.deleteById(reMeetingId);
        return reMeetingId;
    }
}
package org.kosa.project.service.dto;



@Setter
@Getter
public class ChatMessageDto {
    private Long writeUserId;
    private String writeUserName;
    private String message;
    private LocalDateTime writeTime;
}
package org.kosa.project.service.dto.comment;


@Getter
@Setter
@NoArgsConstructor(access = AccessLevel.PUBLIC)
public class CommentRequestDto {
    private Long meetingCommentId;
    private Long meetingId;
    private Long userId;
    private String content;
}
package org.kosa.project.service.dto.comment;


@Getter
@Setter
public class CommentResponseDto {
    private Long meetingCommentId;
    private Long meetingId;
    private Long userId;
    private String userName;
    private String content;
    private String regDate;
}
package org.kosa.project.service.dto.meeting;



@ToString
@NoArgsConstructor
@AllArgsConstructor
@Setter
@Getter
public class MeetingDetailDto {
    private long meetingId;
    private long userId;
    private long regionId;
    private Category category; // ENUM
    private String subject;
    private String context;
    private int totalMember;
    private int presentMember;
    private String fileName;
    private MeetingStatus meetingStatus;
    private LocalDateTime deadLineTime;
    private LocalDate regDate;
    private double latitude;
    private double longitude;
    private List<UserMeetingDto> userMeetingDto;
}
package org.kosa.project.service.dto.meeting;



public record MeetingRegisterDto(long meetingId, long userId, Category category, String subject,
                                 String context, int totalMember, String fileUploadUrl, MeetingStatus status, LocalDateTime deadLineTime, Double latitude, Double longitude) {

}
package org.kosa.project.service.dto.meeting;


@Getter
@Setter
@ToString
public class MeetingSummaryDto {
    private long meetingId;
    private long userId;
    private String userName;
    private Category category; // ENUM
    private String subject;
    private int totalMember;
    private int presentMember;
    private String fileName;
    private MeetingStatus meetingStatus;
}
package org.kosa.project.service.dto;



@Setter
@Getter
public class RoomPermissionDto {
    private Long userId; // 로그인된 사용자 id
    private String userName; // name
    private Long roomId; // room
    private List<ChatMessageDto> chatMessages;
}
package org.kosa.project.service.dto;



@Getter
@Setter
@ToString
public class SaveChatMessageDto {
    private Long chatId;
    private Long roomId;
    private Long userId;
    private String userName;
    private String message;
    private LocalDateTime sendDateTime;
}
package org.kosa.project.service.dto.search;


@Getter
@Setter
@NoArgsConstructor
@ToString
public class SearchConditionDto {
    private String keyword;
    private Category category;
    private String searchType;
    private MeetingStatus meetingStatus;
}package org.kosa.project.service.dto.search;


@Getter
@Setter
@ToString
public class SearchDetailDto {
    private String fileName;
    private Category category;
    private String subject;
    private int totalMember;
    private int presentMember;
    private long meetingId;
}
package org.kosa.project.service.dto.search;


@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
public class SearchUserMeetingListConditionDto {
    private String userTypeCondition;

}
package org.kosa.project.service.dto.user;


@Getter
@Setter
public class LoginForm {
    private String email;
    private String password;
}
package org.kosa.project.service.dto.user;



@Getter
@Setter
@AllArgsConstructor
public class UserDto {
    private Long userId;
    private String phoneNumber;
    private String email;
    private String name;
    private String password;
    private LocalDate birth;
    private String myselfMemo;
    private LocalDate regDate;

    public UserDto(Long userId, String email, String userName, String password) {
        this.userId = userId;
        this.email = email;
        this.name = userName;
        this.password = password;
    }
}
package org.kosa.project.service.dto.user;


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class UserMeetingCheckDto {
    private long userId;
    private UserMeetingStrategy userType;
    private long meetingId;
    private int confirmCheck; // 0이면 나가기, 1이면 등록

    public UserMeetingCheckDto(long userId, UserMeetingStrategy userType, long meetingId) {
        this.userId = userId;
        this.userType = userType;
        this.meetingId = meetingId;
    }
}
package org.kosa.project.service.dto.user;


@AllArgsConstructor
@NoArgsConstructor
@ToString
@Getter
@Setter
public class UserMeetingDto {
    private long userMeetingId;
    private long userId;
    private String userName;
    private long meetingId;
    private UserMeetingStrategy userType;// 회원 정보
}
package org.kosa.project.service.dto.user;



@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
public class UserMeetingListDto {
    private long meetingId;
    private String Subject; //미팅 제목
    private MeetingStatus meetingStatus; //미팅 상태
    private String userName; //만든 사람
    private UserMeetingStrategy userType; //미팅 타입
    private Date regDate;
}
package org.kosa.project.service.dto.user;


@Setter
@Getter
public class UserProfileDto {
    private Long userId;
    private String email;
    private String userName;
    private String phoneNumber;
    private String profileImgUrl; //user_id -> DB, userId
    private String introduction;

    @Override
    public String toString() {
        return "UserProfileDto{" +
                "userId=" + userId +
                ", email='" + email + '\'' +
                ", userName='" + userName + '\'' +
                ", phoneNumber='" + phoneNumber + '\'' +
                ", profileImgUrl='" + profileImgUrl + '\'' +
                ", introduction='" + introduction + '\'' +
                '}';
    }

}
package org.kosa.project.service.dto.user;



@NoArgsConstructor
@ToString
@Getter
@Setter
public class UserRegisterForm {

    @Email(message = "이메일 양식을 입력해주세요.")
    private String email;

    @Length(min = 7, max = 30, message = "비밀번호는 최소 8자, 최대 30자까지 입력 가능합니다.")
    private String password;

    private String userName;

    @NotBlank(message = "전화번호는 필수입니다.")
    @Pattern(regexp = "[0-9]{3,4}-[0-9]{3,4}-[0-9]{3,4}", message = "올바른 전화번호 패턴이 아닙니다.")
    private String phoneNumber;

    private String introduce;
    private LocalDate birthDate;
    private String profileImgUrl;
    private MultipartFile profileImg;

}

package org.kosa.project.service.Enum;

public enum Category {
    ENTIRE("전체"),
    BOB_FRIEND("밥친구"),
    ALCOHOL_FRIEND("술친구"),
    DESSERT("디저트");

    private final String displayName;

    Category(String displayName) {

        this.displayName = displayName;
    }

    public String getDisplayName() {
        return displayName;
    }

    public Category[] value() {
        return Category.values();
    }
}
package org.kosa.project.service.Enum;

public enum MeetingStatus {
    CONTINUE("모집 중"),
    FINISH("마감 완료"),
    TIME_END("일정 종료");
    private final String statusType;

    MeetingStatus(String statusType) {
        this.statusType = statusType;
    }

    public String getStatusType() {
        return statusType;
    }

}
package org.kosa.project.service.Enum;


@Getter
public enum UserMeetingStrategy {
    LEADER("모임장") {
        @Override
        public void handleAction(MeetingService meetingService, UserMeetingCheckDto checkDto) {
            // event 발생 예정
        }
    },
    FOLLOWER("모임원") {
        @Override
        public void handleAction(MeetingService meetingService, UserMeetingCheckDto checkDto) {
            meetingService.exitMeetingService(checkDto);
        }
    },
    WAIT("대기중") {
        @Override
        public void handleAction(MeetingService meetingService, UserMeetingCheckDto checkDto) {
            if (checkDto.getConfirmCheck() == 1 || checkDto.getConfirmCheck() ==2) {
                //권한자가 허용 및 내보낼 때.
                if(checkDto.getConfirmCheck() == 1){
                    meetingService.exitMeetingService(checkDto);
                }else{
                    meetingService.meetingUserAttend(checkDto);
                }
            }else {
                //이거는 일반 사람이
                meetingService.exitMeetingService(checkDto);
            }
        }
    },
    NOT_FOLLOWER("미참여") {
        @Override
        public void handleAction(MeetingService meetingService, UserMeetingCheckDto checkDto) {
            meetingService.meetingUserAttend(checkDto);
        }
    },
    NOT_LOGIN("미인증") {
        @Override
        public void handleAction(MeetingService meetingService, UserMeetingCheckDto checkDto) {
            throw new MeetingUserNotLoginException("로그인 필요");
        }
    };

    private final String userTypeName;

    UserMeetingStrategy(String strategy) {
        this.userTypeName = strategy;
    }

    public abstract void handleAction(MeetingService meetingService, UserMeetingCheckDto checkDto);

}
package org.kosa.project.service.exception.meeting;

public class MeetingUserException extends RuntimeException {

    public MeetingUserException(String message) {
        super(message);
    }
}
package org.kosa.project.service.exception.meeting;

public class MeetingUserNotLoginException extends MeetingUserException {

    public MeetingUserNotLoginException(String message) {
        super("로그인이 필요합니다.");
    }
}
package org.kosa.project.service.exception.meeting;

public class MeetingUserNotSufficientException extends MeetingUserException {

    public MeetingUserNotSufficientException() {
        this("해당 기능을 사용할 수 없는 사용자입니다.");
    }

    public MeetingUserNotSufficientException(String message) {
        super(message);
    }
}
package org.kosa.project.service.fileupload;




@Service
public abstract class FileUploadService {

    @Value("${image.upload-dir}")
    private String uploadDir;
    private static final String PATH_SEPARATOR = getSeparator();

    private static String getSeparator() {
        return System.getProperty("os.name").contains("mac") ? File.separator : "/";
    }

    public String saveFile(MultipartFile imgFile) {
        String originalFilename = imgFile.getOriginalFilename();
        String extension = imgFile.getOriginalFilename().substring(originalFilename.lastIndexOf("."));

        // 1-1. 중복되지 않은 새로운 이름으로 파일을 저장하기 위해서.
        String uuid = UUID.randomUUID().toString();
        String newFileName = uuid + extension;
        String savePath = uploadDir + PATH_SEPARATOR + getTargetUrl();

        System.out.println("fileSavePath: " + savePath);
        // 1-2. 디렉터리가 없다면 이를 생성한다.
        DirectoryUtil.createDirectoriesIfNotExists(savePath);

        // 1-3. 파일을 path에 저장한다.
        String fileSavePath = savePath + PATH_SEPARATOR + newFileName;
        System.out.println("fileSavePath:" + fileSavePath);
        File file = new File(fileSavePath);
        try {
            imgFile.transferTo(file);
            Thread.sleep(500);
            DirectoryUtil.refreshDirectory(Paths.get(savePath));
            return newFileName;
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }


//    public String saveFile(MultipartFile image, String imageRootDir) {
//        String originalFileName = image.getOriginalFilename(); //파일이름
//        String extension = originalFileName.substring(originalFileName.lastIndexOf(".")); //확장명
//        String uniqueFileName = UUID.randomUUID() + extension; //uniqueFileName
//        String savedPath = imageRootDir + File.separator + uniqueFileName;
//        Path filePath = Paths.get(uploadDir + File.separator + savedPath); //파일경로
//        try {
//            if (!Files.exists(filePath.getParent())) {
//                Files.createDirectories(filePath.getParent());
//            }
//
//            Files.write(filePath, image.getBytes());
//
//        } catch (IOException e) {
//            throw new RuntimeException(e);
//        }
//        // 파일 이름,
//        return savedPath;
//    }
//
//    // users 정보를 저장하는 fileService?
//    // meeting 정보를 저장하는 fileService?

    public abstract String getTargetUrl();
}
package org.kosa.project.service.fileupload;


@Service
public class MeetingFileUploadService extends FileUploadService {
    @Override
    public String getTargetUrl() {
        return "meeting";
    }
}
package org.kosa.project.service.fileupload;


// userFileUploadService
@Service
public class UserFileUploadService extends FileUploadService {
    @Override
    public String getTargetUrl() {
        return "users";
    }
}
package org.kosa.project.service;



@Service
@RequiredArgsConstructor
@Log4j2
public class MeetingService {
    private final MeetingRepository meetingRepository;

    //게시물 생성 시 트랜잭션 처리
    @Transactional
    public void save(MeetingRegisterDto meetingDto) {
        meetingRepository.save(meetingDto);

        long meetingId = meetingRepository.selectLastInsertId(meetingDto.userId());
        long userId = meetingDto.userId();

        UserMeetingCheckDto userMeetingCheckDto = new UserMeetingCheckDto(userId, UserMeetingStrategy.LEADER, meetingId);
        meetingRepository.userMeetingSave(userMeetingCheckDto);
        meetingRepository.createMeetingRoom(meetingId);
    }

    /**
     * MEETING LIST
     */

    public Page<MeetingSummaryDto> meetingList(SearchConditionDto searchConditionDto, int page, int pageSize) {
        return meetingRepository.meetingList(searchConditionDto, new Pageable(page, pageSize));
    }

    /**
     *
     */
    public MeetingDetailDto meetingDetails(long meetingId) {
        return meetingRepository.meetingDetails(meetingId);
    }


    //모임 참석 시 권한에 따른
    @Transactional
    public void meetingUserAttend(UserMeetingCheckDto userMeetingCheckDto) {
        UserMeetingStrategy nowUserType = userMeetingCheckDto.getUserType();
        long meetingId = userMeetingCheckDto.getMeetingId();
        if (nowUserType.equals(UserMeetingStrategy.NOT_FOLLOWER)) {
            userMeetingCheckDto.setUserType(UserMeetingStrategy.WAIT);
            meetingRepository.userMeetingSave(userMeetingCheckDto);

            /* 방장이 권한을 줄 떄*/
        } else if (nowUserType.equals(UserMeetingStrategy.WAIT)) {
            userMeetingCheckDto.setUserType(UserMeetingStrategy.FOLLOWER);
            meetingRepository.userMeetingUpdate(userMeetingCheckDto);
            meetingRepository.meetingUpdatePresentStatus(meetingId);
        }
    }

    @Transactional
    /*모임 나가기 버튼  현재원 수 업데이트*/
    public void exitMeetingService(UserMeetingCheckDto userMeetingCheckDto) {
        UserMeetingStrategy nowUserType = userMeetingCheckDto.getUserType();
        long meetingId = userMeetingCheckDto.getMeetingId();
        if (nowUserType.equals(UserMeetingStrategy.WAIT)) {
            meetingRepository.exitMeeting(userMeetingCheckDto);
        } else if (nowUserType.equals(UserMeetingStrategy.FOLLOWER)) {
            meetingRepository.exitMeeting(userMeetingCheckDto);
            meetingRepository.meetingUpdatePresentStatus(meetingId);
        }

    }

    public RoomPermissionDto issueRoomPermission(Long meetingId, Long userId) {
        // 해당 user가 참여하고 있는 meeting 인지의 여부를 확인 한다.
        UserMeetingDto userMeeting = meetingRepository.findUserMeetingByUserIdAndMeetingId(meetingId, userId);
        if (userMeeting == null || userMeeting.getUserType() == UserMeetingStrategy.NOT_FOLLOWER) {
            // 해당 유저는 참여 권한이 없다. 해당 url로 리다이렉트 보내면 된다.
            throw new MeetingUserNotSufficientException();
        }
        // 참여 권한이 있는 유저일 경우, meetingId, userId를 통해 조회된 roomId와 주고 받은 모든 채팅 목록을 반환 받는다.
        // 1. meetingId로 roomId를 조회
        // 2. userId로 user_name등의 간단 정보를 조회
        // 3. roomId를 통한 전체 채팅 내역 조회
        return meetingRepository.findRoomWithAllChatListByMeetingAndUser(meetingId, userId);
    }

    public void updateMeetingEndTime(){
        meetingRepository.updateMeetingEndTime();
    }
}
package org.kosa.project.service.scheduler;


@Component
public class MeetingScheduler {


    private final MeetingService meetingService;

    public MeetingScheduler(MeetingService meetingService) {
        this.meetingService = meetingService;
    }

    //    @Scheduled(cron = "0 0 * * * *") //매시간마다 실행
    //@Scheduled(cron = "0 * * * * *") // 매 분마다 실행
    @Scheduled(cron = "0 */5 * * * *") // 매 5분마다 실행
    public void updateMeetingEndTime() {
        System.out.println("실행");
        meetingService.updateMeetingEndTime();
    }
}
package org.kosa.project.service;


@Service
@RequiredArgsConstructor
public class UserMeetingListService {

    private final UserRepository userRepository;

    public Page<UserMeetingListDto> userMeetingJoinList (long userId, String userType, int page, int pageSize){
        return userRepository.userMeetingJoinList(userId, userType, new Pageable(page, pageSize));
    }
}
package org.kosa.project.service;


@Service
public class UserService {

    private final UserMapper userMapper;

    public UserService(UserMapper userMapper) {
        this.userMapper = userMapper;
    }

    public void save(UserRegisterForm userRegisterForm) {
        userMapper.insertUser(userRegisterForm);
    }


    public String findUserByEmailCheck(String email) {
        String userEmail = userMapper.findUserByEmailCheck(email);

        System.out.println("UserService: Email checked: " + email + ", Found: " + userEmail);  // 디버깅용 로그

        return userEmail;
    }

    public UserProfileDto getProfile(Long userId) {
        return userMapper.findUserProfileById(userId);
    }

}
package org.kosa.project;


public class ServletInitializer extends SpringBootServletInitializer {

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(KosaProject2ndApplication.class);
    }

}
package org.kosa.project.util;


public class DirectoryUtil {
    public static void createDirectoriesIfNotExists(String directoryPath) {
        Path path = Paths.get(directoryPath);
        if (Files.notExists(path)) {
            try {
                Files.createDirectories(path);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public static void refreshDirectory(Path dir) throws IOException {
        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                System.out.println("파일: " + file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) {
                System.out.println("디렉터리: " + dir);
                return FileVisitResult.CONTINUE;
            }
        });
    }
}
