<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosa.project.repository.mapper.MeetingMapper">
    <resultMap id="MeetingSummaryDtoPageResultMap" type="org.kosa.project.controller.Page">
        <result property="currentPage" column="currentPage"/>
        <result property="pagePerSize" column="pagePerSize"/>
        <result property="totalDataSize" column="totalDataSize"/>
        <collection property="elements" ofType="org.kosa.project.service.dto.meeting.MeetingSummaryDto"
                    resultMap="MeetingSummaryDtoResultMap"/>
    </resultMap>

    <resultMap id="MeetingSummaryDtoResultMap" type="org.kosa.project.service.dto.meeting.MeetingSummaryDto">
        <result property="meetingId" column="meeting_id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="category" column="category"/>
        <result property="subject" column="subject"/>
        <result property="totalMember" column="total_member"/>
        <result property="presentMember" column="present_member"/>
        <result property="fileName" column="file_name"/>
        <result property="meetingStatus" column="status"/>
    </resultMap>

    <!-- UserMeetingDto 매핑 -->
    <resultMap id="UserMeetingDtoResultMap" type="org.kosa.project.service.dto.user.UserMeetingDto">
        <id property="userMeetingId" column="user_meeting_id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="meetingId" column="meeting_id"/>
        <result property="userType" column="user_type"/>
    </resultMap>

    <resultMap id="ChatMessageDtoResultMap" type="org.kosa.project.service.dto.ChatMessageDto">
        <result property="writeUserId" column="writeUserId"></result>
        <result property="writeUserName" column="writeUserName"></result>
        <result property="message" column="message"/>
        <result property="writeTime" column="writeTime"/>
    </resultMap>

    <resultMap id="RoomPermissionDtoResultMap" type="org.kosa.project.service.dto.RoomPermissionDto">
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="roomId" column="room_id"/>
        <collection property="chatMessages" ofType="org.kosa.project.service.dto.ChatMessageDto"
                    resultMap="ChatMessageDtoResultMap"/>
    </resultMap>

    <!-- MeetingDetailDto 매핑 -->
    <resultMap id="MeetingDetailDtoResultMap" type="org.kosa.project.service.dto.meeting.MeetingDetailDto">
        <id property="meetingId" column="meeting_id"/>
        <result property="userId" column="user_id"/>
        <result property="category" column="category"/>
        <result property="subject" column="subject"/>
        <result property="context" column="context"/>
        <result property="totalMember" column="total_member"/>
        <result property="presentMember" column="present_member"/>
        <result property="fileName" column="file_name"/>
        <result property="meetingStatus" column="status"/>
        <result property="regDate" column="reg_dt"/>
        <result property="deadLineTime" column="DEADLINE_TIME"/>
        <result property="longitude" column="longitude"/>
        <result property="latitude" column="latitude" />

        <collection property="userMeetingDto" ofType="org.kosa.project.service.dto.user.UserMeetingDto"
                    resultMap="UserMeetingDtoResultMap"/>
    </resultMap>


    <!--Meeting생성시 save / select / userMeeting테이블까지 저장-->
    <insert id="save" parameterType="org.kosa.project.controller.MeetingRegisterRequest">
        INSERT INTO MEETING (user_id,
                             category,
                             subject,
                             context,
                             total_member,
                             file_name,
                             deadline_time,
                             longitude,
                             latitude)
        VALUES (#{userId}, #{category}, #{subject}, #{context}, #{totalMember}, #{fileUploadUrl}, #{deadLineTime},
                #{longitude}, #{latitude})
    </insert>

    <insert id="createMeetingRoom">
        insert into room (meeting_id)
        values (#{meetingId})
    </insert>

    <select id="selectLastInsertId" resultType="long">
        SELECT meeting_id
        FROM MEETING
        WHERE user_id = #{userId}
        ORDER BY meeting_id DESC FETCH FIRST 1 ROWS ONLY
    </select>

    <insert id="userMeetingSave" parameterType="org.kosa.project.service.dto.user.UserMeetingCheckDto">
        insert into user_meeting (user_id, meeting_id, user_type)
        values (#{userId}, #{meetingId}, #{userType})
    </insert>

    <update id="userMeetingUpdate" parameterType="org.kosa.project.service.dto.user.UserMeetingCheckDto">
        UPDATE user_meeting
        SET user_type = CASE
                            WHEN user_type = 'WAIT' THEN 'FOLLOWER'
                            WHEN user_type = 'FOLLOWER' THEN 'WAIT'
            END
        WHERE user_id = #{userId} AND meeting_id = #{meetingId}
    </update>

    <!-- 특정 meetingId와 userId를 기준으로 user_meeting 데이터 삭제 -->
    <delete id="exitMeeting" parameterType="org.kosa.project.service.dto.user.UserMeetingCheckDto">
        DELETE
        FROM user_meeting
        WHERE meeting_id = #{meetingId}
          AND user_id = #{userId}
    </delete>

    <!--모임 참석에 따른 인원 변경 -->
    <update id="meetingUpdatePresentStatus" parameterType="long">
        UPDATE MEETING
        SET PRESENT_MEMBER = (SELECT COUNT(*)
                              FROM USER_MEETING
                              WHERE MEETING_ID = #{meetingId}
                                AND (USER_TYPE = 'FOLLOWER' OR USER_TYPE = 'LEADER')),
            status         = CASE
                                 WHEN (SELECT COUNT(*)
                                       FROM USER_MEETING
                                       WHERE MEETING_ID =  #{meetingId}
                                         AND (USER_TYPE = 'FOLLOWER' OR USER_TYPE = 'LEADER')) = TOTAL_MEMBER
                                     AND status = 'CONTINUE' THEN 'FINISH'
                                 WHEN (SELECT COUNT(*)
                                       FROM USER_MEETING
                                       WHERE MEETING_ID =  #{meetingId}
                                         AND (USER_TYPE = 'FOLLOWER' OR USER_TYPE = 'LEADER')) &lt; TOTAL_MEMBER
                                     AND status = 'FINISH' THEN 'CONTINUE'
                                 ELSE status
                END
        WHERE MEETING_ID = #{meetingId}
    </update>


    <select id="meetingList" resultMap="MeetingSummaryDtoPageResultMap">
        select *
        from (select meeting_id,
        user_id,
        category,
        subject,
        context,
        file_name,
        total_member,
        present_member,
        status,
        count(*) over() as totalDataSize,
        (select #{pageable.currentPage} from dual) as currentPage,
        (select #{pageable.pagePerSize} from dual) as pagePerSize,
        row_number() over (order by meeting_id desc, reg_dt desc) as rnum
        from meeting
        where meeting_id > 0
            <if test='condition.keyword != null'>
                <if test='condition.searchType == "all"'>
                    and subject like '%' || #{condition.keyword} || '%' or context like '%' || #{condition.keyword} || '%'
                </if>
                <if test='condition.searchType == "subject"'>
                    and subject like '%' || #{condition.keyword} || '%'
                </if>
                <if test='condition.searchType == "keyword"'>
                    and context like '%' || #{condition.keyword} || '%'
                </if>
            </if>

            <if test="condition.category !=null">
            <foreach item="cate" index="index" collection="condition.category.value()">
                <if test='condition.category.name() != "ENTIRE"'>
                    and category like '%' || #{condition.category} || '%'
                </if>
            </foreach>
            </if>

        )x
        where rnum between ((#{pageable.currentPage} - 1) * #{pageable.pagePerSize}) + 1 and #{pageable.currentPage} *
        #{pageable.pagePerSize}
    </select>


    <select id="getUserMeetingCheck" parameterType="org.kosa.project.service.dto.user.UserMeetingCheckDto"
            resultType="String">
        select user_type
        from user_meeting
        where user_id = #{userId}
          and meeting_id = #{meetingId}
    </select>

    <!-- 쿼리 -->
    <select id="meetingDetails" parameterType="long" resultMap="MeetingDetailDtoResultMap">
        SELECT m.meeting_id  as meeting_id,
               um.user_id,
               m.category,
               m.subject,
               m.context,
               m.total_member,
               m.present_member,
               m.file_name,
               m.status,
               m.reg_dt,
               m.DEADLINE_TIME,
               um.user_meeting_id,
               um.user_id,
               u.user_name,
               um.meeting_id as um_meeting_id,
               um.user_type,
               m.LATITUDE,
               m.LONGITUDE
        FROM meeting m
                 LEFT JOIN user_meeting um ON m.meeting_id = um.meeting_id
                 LEFT JOIN users u ON um.user_id = u.user_id
        WHERE m.meeting_id = #{meetingId}
        ORDER BY CASE
                     WHEN um.user_type = 'LEADER' THEN 0
                     ELSE 1
                     END,
                 um.user_id
    </select>

    <select id="findUserMeetingByUserIdAndMeetingId" resultMap="UserMeetingDtoResultMap">
        select um.user_meeting_id, u.user_id, u.user_name, um.meeting_id, um.user_type
        from users u
        join USER_MEETING um on u.user_id = um.user_id
        where u.user_id = #{userId} and um.meeting_id = #{meetingId}
    </select>

    <select id="findRoomWithAllChatListByMeetingAndUser" resultMap="RoomPermissionDtoResultMap">
        select u.user_name, u.user_id, r.room_id, (select user_name from users where user_id = c.user_id) as writeUserName , c.USER_ID as writeUserId, c.message, c.message_send_date as writeTime
        from meeting m
                 join room r on r.MEETING_ID = m.MEETING_ID
                 left join chat c on c.room_id = r.room_id
                 left join (select user_id, user_name from users where user_id = #{userId}) u on 1 = 1
        where m.meeting_id = #{meetingId}
        order by MESSAGE_SEND_DATE
    </select>

    <insert id="saveChat" parameterType="org.kosa.project.service.dto.SaveChatMessageDto" useGeneratedKeys="true" keyColumn="chat_id" keyProperty="chatId">
        insert into chat (room_id, user_id, message, message_send_date)
        values (#{roomId}, #{userId}, #{message}, #{sendDateTime})
    </insert>

    <update id="updateMeetingEndTime">
        UPDATE MEETING
        SET STATUS = 'TIME_END'
        WHERE DEADLINE_TIME &lt; SYSTIMESTAMP
                              AND (STATUS = 'FINISH' OR STATUS = 'CONTINUE')
    </update>

</mapper>
